#!/bin/bash
set -e

echo "üöÄ Iniciando Sistema Completo - PontualIoT"
echo "=========================================="

# Fun√ß√£o para log colorido
log_info() { echo -e "\033[1;34m[INFO]\033[0m $1"; }
log_success() { echo -e "\033[1;32m[SUCCESS]\033[0m $1"; }
log_error() { echo -e "\033[1;31m[ERROR]\033[0m $1"; }
log_warning() { echo -e "\033[1;33m[WARNING]\033[0m $1"; }

# 1. Subir infraestrutura completa
echo ""
log_info "üèóÔ∏è Subindo Infraestrutura Completa"
echo "-----------------------------------"

log_info "Iniciando PostgreSQL, MQTT, Prometheus e Grafana..."
if docker-compose up -d postgres mosquitto prometheus grafana; then
    log_success "‚úÖ Infraestrutura completa iniciada"
else
    log_error "‚ùå Falha ao iniciar infraestrutura"
    exit 1
fi

# Aguardar servi√ßos inicializarem
log_info "Aguardando servi√ßos inicializarem..."
sleep 10

# 2. Verificar infraestrutura
echo ""
log_info "üîç Verificando Infraestrutura"
echo "-----------------------------"

# PostgreSQL
if nc -z localhost 5432 2>/dev/null; then
    log_success "‚úÖ PostgreSQL - Porta 5432"
else
    log_error "‚ùå PostgreSQL n√£o est√° acess√≠vel"
    exit 1
fi

# MQTT
if nc -z localhost 1883 2>/dev/null; then
    log_success "‚úÖ MQTT Broker - Porta 1883"
else
    log_error "‚ùå MQTT Broker n√£o est√° acess√≠vel"
    exit 1
fi

# Prometheus
if nc -z localhost 9090 2>/dev/null; then
    log_success "‚úÖ Prometheus - Porta 9090"
else
    log_warning "‚ö†Ô∏è Prometheus n√£o est√° acess√≠vel"
fi

# Grafana
if nc -z localhost 3000 2>/dev/null; then
    log_success "‚úÖ Grafana - Porta 3000"
else
    log_warning "‚ö†Ô∏è Grafana n√£o est√° acess√≠vel"
fi

# 3. Iniciar API Core
echo ""
log_info "üîß Iniciando API Core"
echo "--------------------"

# Verificar se j√° est√° rodando
if curl -s http://localhost:8080/api/actuator/health > /dev/null 2>&1; then
    log_success "‚úÖ API Core j√° est√° rodando"
else
    log_info "Compilando e iniciando API Core..."
    cd api-core
    
    # Build r√°pido
    if mvn clean package -DskipTests -q; then
        log_success "‚úÖ API Core compilada"
    else
        log_error "‚ùå Falha na compila√ß√£o da API Core"
        exit 1
    fi
    
    # Iniciar em background
    nohup mvn spring-boot:run > ../api-core.log 2>&1 &
    API_PID=$!
    cd ..
    
    # Aguardar inicializa√ß√£o
    log_info "Aguardando API Core inicializar..."
    for i in {1..30}; do
        if curl -s http://localhost:8080/api/actuator/health > /dev/null 2>&1; then
            log_success "‚úÖ API Core rodando na porta 8080"
            break
        fi
        sleep 2
        if [ $i -eq 30 ]; then
            log_error "‚ùå Timeout na inicializa√ß√£o da API Core"
            exit 1
        fi
    done
fi

# 4. Iniciar IoT Simulator
echo ""
log_info "üì° Iniciando IoT Simulator"
echo "--------------------------"

if [ -f "iot-devices/simulator/pom.xml" ]; then
    cd iot-devices/simulator
    log_info "Compilando IoT Simulator..."
    if mvn clean package -DskipTests -q; then
        log_success "‚úÖ IoT Simulator compilado"
        
        # Iniciar em background
        nohup mvn exec:java -Dexec.mainClass="com.pontualiot.simulator.SimulatorApplication" > ../../simulator.log 2>&1 &
        SIMULATOR_PID=$!
        log_success "‚úÖ IoT Simulator iniciado (PID: $SIMULATOR_PID)"
    else
        log_warning "‚ö†Ô∏è Falha na compila√ß√£o do IoT Simulator"
    fi
    cd ../..
else
    log_warning "‚ö†Ô∏è IoT Simulator n√£o encontrado"
fi

# 5. Iniciar Web Admin
echo ""
log_info "üåê Iniciando Web Admin"
echo "----------------------"

if [ -f "web-admin/package.json" ]; then
    cd web-admin
    
    # Verificar depend√™ncias
    if [ ! -d "node_modules" ]; then
        log_info "Instalando depend√™ncias do Web Admin..."
        if npm install --silent; then
            log_success "‚úÖ Depend√™ncias instaladas"
        else
            log_warning "‚ö†Ô∏è Falha na instala√ß√£o de depend√™ncias"
            cd ..
            return
        fi
    fi
    
    # Iniciar em background
    log_info "Iniciando Web Admin..."
    nohup npm start > ../web-admin.log 2>&1 &
    WEB_PID=$!
    
    # Aguardar inicializa√ß√£o
    sleep 5
    if curl -s http://localhost:3001 > /dev/null 2>&1; then
        log_success "‚úÖ Web Admin rodando na porta 3001"
    else
        log_warning "‚ö†Ô∏è Web Admin pode estar inicializando..."
    fi
    cd ..
else
    log_warning "‚ö†Ô∏è Web Admin n√£o encontrado"
fi

# 6. Iniciar Mobile App
echo ""
log_info "üì± Iniciando Mobile App"
echo "-----------------------"

if [ -f "mobile-app/package.json" ]; then
    cd mobile-app
    
    # Verificar depend√™ncias
    if [ ! -d "node_modules" ]; then
        log_info "Instalando depend√™ncias do Mobile App..."
        if npm install --silent; then
            log_success "‚úÖ Depend√™ncias instaladas"
        else
            log_warning "‚ö†Ô∏è Falha na instala√ß√£o de depend√™ncias"
            cd ..
            return
        fi
    fi
    
    # Iniciar Expo
    log_info "Iniciando Mobile App (Expo)..."
    nohup npx expo start --tunnel > ../mobile-app.log 2>&1 &
    MOBILE_PID=$!
    log_success "‚úÖ Mobile App iniciado (verifique QR code no log)"
    cd ..
else
    log_warning "‚ö†Ô∏è Mobile App n√£o encontrado"
fi

# 7. Health Check Completo
echo ""
log_info "üè• Health Check Completo"
echo "------------------------"

# API Core
if curl -s http://localhost:8080/api/actuator/health | grep -q "UP"; then
    log_success "‚úÖ API Core - Health OK"
else
    log_error "‚ùå API Core - Health Check falhou"
fi

# Endpoints principais
if curl -s http://localhost:8080/api/employees > /dev/null; then
    log_success "‚úÖ Endpoint /employees - OK"
else
    log_warning "‚ö†Ô∏è Endpoint /employees - Problema"
fi

# M√©tricas
if curl -s http://localhost:8080/api/actuator/prometheus | grep -q "jvm_memory"; then
    log_success "‚úÖ M√©tricas Prometheus - OK"
else
    log_warning "‚ö†Ô∏è M√©tricas Prometheus - N√£o dispon√≠veis"
fi

# Web Admin
if curl -s http://localhost:3001 > /dev/null 2>&1; then
    log_success "‚úÖ Web Admin - Acess√≠vel"
else
    log_warning "‚ö†Ô∏è Web Admin - N√£o acess√≠vel ainda"
fi

# Prometheus
if curl -s http://localhost:9090/-/healthy > /dev/null 2>&1; then
    log_success "‚úÖ Prometheus - Healthy"
else
    log_warning "‚ö†Ô∏è Prometheus - N√£o healthy"
fi

# Grafana
if curl -s http://localhost:3000/api/health > /dev/null 2>&1; then
    log_success "‚úÖ Grafana - Healthy"
else
    log_warning "‚ö†Ô∏è Grafana - N√£o healthy"
fi

# 8. Teste de Integra√ß√£o R√°pido
echo ""
log_info "‚ö° Teste de Integra√ß√£o R√°pido"
echo "-----------------------------"

# Criar employee de teste
log_info "Testando cria√ß√£o de employee..."
TEST_RESPONSE=$(curl -s -X POST http://localhost:8080/api/employees \
  -H "Content-Type: application/json" \
  -d '{"name":"Sistema Test","email":"sistema@test.com","rfidTag":"SYS001","active":true}')

if echo "$TEST_RESPONSE" | grep -q "Sistema Test"; then
    log_success "‚úÖ Integra√ß√£o - CRUD funcionando"
    
    # Extrair ID e fazer check-in
    EMPLOYEE_ID=$(echo "$TEST_RESPONSE" | grep -o '"id":[0-9]*' | cut -d':' -f2)
    CHECKIN_RESPONSE=$(curl -s -X POST "http://localhost:8080/api/attendances/check-in" \
      -H "Content-Type: application/json" \
      -d "{\"employeeId\": $EMPLOYEE_ID}")
    
    if echo "$CHECKIN_RESPONSE" | grep -q "CHECK_IN"; then
        log_success "‚úÖ Integra√ß√£o - Attendance funcionando"
    else
        log_warning "‚ö†Ô∏è Integra√ß√£o - Attendance com problema"
    fi
    
    # Limpar teste
    curl -s -X DELETE "http://localhost:8080/api/employees/$EMPLOYEE_ID" > /dev/null
else
    log_warning "‚ö†Ô∏è Integra√ß√£o - CRUD com problema"
fi

# RESULTADO FINAL
echo ""
echo "=========================================="
log_success "üéâ SISTEMA COMPLETO INICIADO!"
echo "=========================================="
echo ""
log_info "üìä Servi√ßos Dispon√≠veis:"
echo "  ‚Ä¢ API Core: http://localhost:8080/api"
echo "  ‚Ä¢ Swagger UI: http://localhost:8080/swagger-ui/index.html"
echo "  ‚Ä¢ Health Check: http://localhost:8080/api/actuator/health"
echo "  ‚Ä¢ M√©tricas: http://localhost:8080/api/actuator/prometheus"
echo "  ‚Ä¢ Web Admin: http://localhost:3001"
echo "  ‚Ä¢ Mobile App Web: http://localhost:19006"
echo "  ‚Ä¢ PostgreSQL: localhost:5432 (postgres/postgres)"
echo "  ‚Ä¢ MQTT Broker: localhost:1883"
echo "  ‚Ä¢ Prometheus: http://localhost:9090"
echo "  ‚Ä¢ Grafana: http://localhost:3000 (admin/admin)"
echo ""
log_info "üîß Para parar todos os servi√ßos:"
echo "  docker-compose down"
echo "  pkill -f 'spring-boot:run|SimulatorApplication|npm start|expo start'"
echo ""
log_info "üß™ Para executar testes E2E:"
echo "  ./run-e2e-integration.sh"
echo ""
log_info "üìã Logs dos servi√ßos:"
echo "  ‚Ä¢ API Core: tail -f api-core.log"
echo "  ‚Ä¢ IoT Simulator: tail -f simulator.log"
echo "  ‚Ä¢ Web Admin: tail -f web-admin.log"
echo "  ‚Ä¢ Mobile App: tail -f mobile-app.log"