#!/bin/bash
set -e

echo "üè¢ Iniciando M√≥dulos de Neg√≥cio - PontualIoT"
echo "============================================"

# Fun√ß√£o para log colorido
log_info() { echo -e "\033[1;34m[INFO]\033[0m $1"; }
log_success() { echo -e "\033[1;32m[SUCCESS]\033[0m $1"; }
log_error() { echo -e "\033[1;31m[ERROR]\033[0m $1"; }
log_warning() { echo -e "\033[1;33m[WARNING]\033[0m $1"; }

# Verificar se Docker est√° rodando
if ! docker info > /dev/null 2>&1; then
    log_error "‚ùå Docker n√£o est√° rodando. Inicie o Docker primeiro."
    exit 1
fi

# 1. Subir infraestrutura b√°sica
log_info "üóÑÔ∏è Subindo infraestrutura (PostgreSQL + MQTT)..."
if docker-compose up -d postgres mosquitto; then
    log_success "‚úÖ Infraestrutura rodando"
else
    log_error "‚ùå Falha ao subir infraestrutura"
    exit 1
fi

# Aguardar servi√ßos
log_info "‚è≥ Aguardando infraestrutura inicializar..."
sleep 8

# 2. Iniciar API Core
log_info "üåê Iniciando API Core..."
cd api-core
if mvn clean compile -q; then
    nohup mvn spring-boot:run > ../api-core.log 2>&1 &
    API_PID=$!
    log_success "‚úÖ API Core compilada e iniciada"
else
    log_error "‚ùå Falha ao compilar API Core"
    exit 1
fi
cd ..

# Aguardar API inicializar
log_info "‚è≥ Aguardando API Core inicializar..."
for i in {1..30}; do
    if curl -s http://localhost:8080/api/actuator/health > /dev/null 2>&1; then
        log_success "‚úÖ API Core rodando na porta 8080"
        break
    fi
    sleep 2
done

# 3. Iniciar IoT Simulator
log_info "üì° Iniciando IoT Simulator..."
cd iot-devices/simulator
if mvn clean compile -q; then
    nohup mvn exec:java -Dexec.mainClass="com.pontualiot.simulator.SimulatorApplication" > ../../simulator.log 2>&1 &
    SIMULATOR_PID=$!
    log_success "‚úÖ IoT Simulator compilado e iniciado"
else
    log_warning "‚ö†Ô∏è Falha ao compilar IoT Simulator (continuando...)"
fi
cd ../..

# 4. Iniciar Web Admin (se dispon√≠vel)
if [ -f "web-admin/package.json" ]; then
    log_info "üñ•Ô∏è Iniciando Web Admin..."
    cd web-admin
    if [ -d "node_modules" ]; then
        nohup npm start > ../web-admin.log 2>&1 &
        WEB_PID=$!
        log_success "‚úÖ Web Admin iniciado"
    else
        log_info "üì¶ Instalando depend√™ncias do Web Admin..."
        if npm install; then
            nohup npm start > ../web-admin.log 2>&1 &
            WEB_PID=$!
            log_success "‚úÖ Web Admin instalado e iniciado"
        else
            log_warning "‚ö†Ô∏è Falha ao instalar Web Admin (continuando...)"
        fi
    fi
    cd ..
fi

# 5. Iniciar Mobile App (se dispon√≠vel)
if [ -f "mobile-app/package.json" ]; then
    log_info "üì± Iniciando Mobile App..."
    cd mobile-app
    if [ -d "node_modules" ]; then
        nohup npx expo start --tunnel > ../mobile-app.log 2>&1 &
        MOBILE_PID=$!
        log_success "‚úÖ Mobile App iniciado (Web + Android/iOS)"
    else
        log_info "üì¶ Instalando depend√™ncias do Mobile App..."
        if npm install; then
            nohup npx expo start --tunnel > ../mobile-app.log 2>&1 &
            MOBILE_PID=$!
            log_success "‚úÖ Mobile App instalado e iniciado"
        else
            log_warning "‚ö†Ô∏è Falha ao instalar Mobile App (continuando...)"
        fi
    fi
    cd ..
fi

# 5. Aguardar todos os servi√ßos
log_info "‚è≥ Aguardando todos os servi√ßos estabilizarem..."
sleep 10

echo ""
echo "============================================"
log_success "üéâ M√ìDULOS DE NEG√ìCIO ATIVOS!"
echo "============================================"
echo ""
log_info "üè¢ Servi√ßos de Neg√≥cio:"
echo "  ‚Ä¢ API Core: http://localhost:8080/api"
echo "  ‚Ä¢ Swagger: http://localhost:8080/swagger-ui/index.html"
echo "  ‚Ä¢ Health: http://localhost:8080/api/actuator/health"
echo "  ‚Ä¢ IoT Simulator: Rodando em background"
echo "  ‚Ä¢ Web Admin: http://localhost:3001 (se dispon√≠vel)"
echo "  ‚Ä¢ Mobile App Web: http://localhost:19006"
echo "  ‚Ä¢ Mobile App Android/iOS: Escaneie QR code"
echo ""
log_info "üóÑÔ∏è Infraestrutura:"
echo "  ‚Ä¢ PostgreSQL: localhost:5432"
echo "  ‚Ä¢ MQTT Broker: localhost:1883"
echo "  ‚Ä¢ MQTT WebSocket: localhost:9001"
echo ""
log_info "üîß Para parar os servi√ßos:"
echo "  docker-compose stop postgres mosquitto"
echo "  pkill -f 'spring-boot:run|SimulatorApplication|npm start|expo start'"
echo ""
log_warning "üí° Para monitoramento, execute: ./start-monitoring.sh"