package com.pontualiot.demo.service;

import com.pontualiot.demo.model.Company;
import com.pontualiot.demo.model.Device;
import com.pontualiot.demo.model.CommunicationMode;
import com.pontualiot.demo.repository.DeviceRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.util.Optional;
import java.util.UUID;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assertions.assertThatThrownBy;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.when;

@ExtendWith(MockitoExtension.class)
class DeviceServiceTest {

    @Mock
    private DeviceRepository deviceRepository;

    @Mock
    private CompanyService companyService;

    @InjectMocks
    private DeviceService deviceService;

    private Company testCompany;
    private Device testDevice;

    @BeforeEach
    void setUp() {
        testCompany = new Company();
        testCompany.setId(UUID.randomUUID());
        testCompany.setName("Tech Corp");
        testCompany.setActive(true);

        testDevice = new Device();
        testDevice.setId(UUID.randomUUID());
        testDevice.setSerialNumber("DEV001");
        testDevice.setModel("Terminal 1");
        testDevice.setLocation("Entrance");
        testDevice.setCommunicationMode(CommunicationMode.MQTT);
        testDevice.setCompany(testCompany);
        testDevice.setActive(true);
    }

    @Test
    void shouldRegisterDeviceWithValidData() {
        // Given
        UUID companyId = testCompany.getId();
        when(companyService.findById(companyId)).thenReturn(testCompany);
        when(deviceRepository.existsBySerialNumber("DEV001")).thenReturn(false);
        when(deviceRepository.save(any(Device.class))).thenReturn(testDevice);

        // When
        Device registered = deviceService.register(
            companyId, "DEV001", "Terminal 1", "Entrance", CommunicationMode.MQTT
        );

        // Then
        assertThat(registered.getSerialNumber()).isEqualTo("DEV001");
        assertThat(registered.getModel()).isEqualTo("Terminal 1");
        assertThat(registered.getLocation()).isEqualTo("Entrance");
        assertThat(registered.getCommunicationMode()).isEqualTo(CommunicationMode.MQTT);
        assertThat(registered.getCompany()).isEqualTo(testCompany);
        assertThat(registered.getActive()).isTrue();
    }

    @Test
    void shouldThrowExceptionWhenSerialNumberAlreadyExists() {
        // Given
        UUID companyId = testCompany.getId();
        when(companyService.findById(companyId)).thenReturn(testCompany);
        when(deviceRepository.existsBySerialNumber("DEV001")).thenReturn(true);

        // When & Then
        assertThatThrownBy(() -> 
            deviceService.register(companyId, "DEV001", "Terminal 2", "Exit", CommunicationMode.HTTP)
        ).isInstanceOf(IllegalArgumentException.class)
         .hasMessage("Device with serial number DEV001 already exists");
    }

    @Test
    void shouldUpdateDeviceStatus() {
        // Given
        when(deviceRepository.findBySerialNumber("DEV001")).thenReturn(Optional.of(testDevice));
        when(deviceRepository.save(any(Device.class))).thenReturn(testDevice);

        // When
        deviceService.updateStatus("DEV001", false);

        // Then
        assertThat(testDevice.getActive()).isFalse();
    }

    @Test
    void shouldThrowExceptionWhenDeviceNotFoundForStatusUpdate() {
        // Given
        when(deviceRepository.findBySerialNumber("DEV999")).thenReturn(Optional.empty());

        // When & Then
        assertThatThrownBy(() -> deviceService.updateStatus("DEV999", false))
            .isInstanceOf(IllegalArgumentException.class)
            .hasMessage("Device not found with serial number: DEV999");
    }
}