package com.pontualiot.demo.controller;

import com.fasterxml.jackson.databind.ObjectMapper;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.WebMvcTest;
import org.springframework.http.MediaType;
import org.springframework.security.test.context.support.WithMockUser;
import org.springframework.test.web.servlet.MockMvc;

import java.time.OffsetDateTime;

import static org.hamcrest.Matchers.*;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;

@WebMvcTest(HealthController.class)
class HealthControllerTest {

    @Autowired
    private MockMvc mockMvc;

    @Autowired
    private ObjectMapper objectMapper;

    @Test
    @WithMockUser
    void health_ShouldReturnOkStatus() throws Exception {
        mockMvc.perform(get("/health"))
            .andExpect(status().isOk())
            .andExpect(content().contentType(MediaType.APPLICATION_JSON))
            .andExpect(jsonPath("$.status").value("UP"))
            .andExpect(jsonPath("$.service").value("pontual-iot-api-core"))
            .andExpect(jsonPath("$.version").value("1.0.0"))
            .andExpect(jsonPath("$.timestamp").exists())
            .andExpect(jsonPath("$.timestamp").value(matchesPattern("\\d{4}-\\d{2}-\\d{2}T\\d{2}:\\d{2}:\\d{2}\\.\\d+.*")));
    }

    @Test
    @WithMockUser
    void health_ShouldReturnCurrentTimestamp() throws Exception {
        OffsetDateTime before = OffsetDateTime.now().minusSeconds(1);
        
        String response = mockMvc.perform(get("/health"))
            .andExpect(status().isOk())
            .andReturn()
            .getResponse()
            .getContentAsString();

        OffsetDateTime after = OffsetDateTime.now().plusSeconds(1);
        
        var healthResponse = objectMapper.readTree(response);
        OffsetDateTime timestamp = OffsetDateTime.parse(healthResponse.get("timestamp").asText());
        
        assert timestamp.isAfter(before) && timestamp.isBefore(after);
    }

    @Test
    @WithMockUser
    void health_ShouldContainAllRequiredFields() throws Exception {
        mockMvc.perform(get("/health"))
            .andExpect(status().isOk())
            .andExpect(jsonPath("$.status").exists())
            .andExpect(jsonPath("$.timestamp").exists())
            .andExpect(jsonPath("$.service").exists())
            .andExpect(jsonPath("$.version").exists());
    }
}